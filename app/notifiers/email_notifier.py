"""
ÈÇÆ‰ª∂ÈÄöÁü•Âô®
ÊîØÊåÅHTMLÈÇÆ‰ª∂ÂèëÈÄÅÂíåÊ®°ÊùøÊ∏≤Êüì
"""

import asyncio
import smtplib
import ssl
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from typing import List, Optional, Dict, Any

from app.core.config import get_settings
from app.core.logger import get_logger

logger = get_logger(__name__)


class EmailNotifier:
    """ÈÇÆ‰ª∂ÈÄöÁü•Âô®"""
    
    def __init__(self):
        self.settings = get_settings()
        self.notification_config = self.settings.notification
        self.executor = ThreadPoolExecutor(max_workers=2)
    
    def _create_smtp_connection(self) -> smtplib.SMTP:
        """ÂàõÂª∫SMTPËøûÊé•"""
        try:
            logger.info(f"üìß Â∞ùËØïËøûÊé•SMTPÊúçÂä°Âô®: {self.notification_config.email_smtp_host}:{self.notification_config.email_smtp_port}")
            
            # ÂàõÂª∫SMTPËøûÊé•
            server = smtplib.SMTP(
                self.notification_config.email_smtp_host,
                self.notification_config.email_smtp_port,
                timeout=30  # Ê∑ªÂä†Ë∂ÖÊó∂ËÆæÁΩÆ
            )
            
            # ËÆæÁΩÆË∞ÉËØïÁ∫ßÂà´ÔºàÂèØÈÄâÔºâ
            # server.set_debuglevel(1)
            
            logger.info("üìß SMTPËøûÊé•Âª∫Á´ãÊàêÂäüÔºåÂºÄÂßãTLSÊè°Êâã")
            
            # ÂêØÁî®TLSÂä†ÂØÜ
            context = ssl.create_default_context()
            server.starttls(context=context)
            
            logger.info("üìß TLSÊè°ÊâãÊàêÂäüÔºåÂºÄÂßãËÆ§ËØÅ")
            
            # ÁôªÂΩï
            server.login(
                self.notification_config.email_username,
                self.notification_config.email_password
            )
            
            logger.info(f"‚úÖ SMTPËøûÊé•ÂíåËÆ§ËØÅÊàêÂäü: {self.notification_config.email_smtp_host}")
            return server
            
        except smtplib.SMTPAuthenticationError as e:
            logger.error(f"üìß SMTPËÆ§ËØÅÂ§±Ë¥•: {str(e)} - Áî®Êà∑Âêç: {self.notification_config.email_username}")
            raise
        except smtplib.SMTPConnectError as e:
            logger.error(f"üìß SMTPËøûÊé•Â§±Ë¥•: {str(e)} - ÊúçÂä°Âô®: {self.notification_config.email_smtp_host}:{self.notification_config.email_smtp_port}")
            raise
        except smtplib.SMTPServerDisconnected as e:
            logger.error(f"üìß SMTPÊúçÂä°Âô®Êñ≠ÂºÄËøûÊé•: {str(e)}")
            raise
        except Exception as e:
            logger.error(f"üìß SMTPËøûÊé•ÂàõÂª∫Â§±Ë¥•: {str(e)} - Á±ªÂûã: {type(e).__name__}")
            raise
    
    def _create_message(
        self,
        to_emails: List[str],
        subject: str,
        html_content: str,
        text_content: Optional[str] = None
    ) -> MIMEMultipart:
        """ÂàõÂª∫ÈÇÆ‰ª∂Ê∂àÊÅØ"""
        message = MIMEMultipart("alternative")
        message["Subject"] = subject
        message["From"] = self.notification_config.email_from
        message["To"] = ", ".join(to_emails)
        
        # Ê∑ªÂä†Á∫ØÊñáÊú¨ÁâàÊú¨
        if text_content:
            text_part = MIMEText(text_content, "plain", "utf-8")
            message.attach(text_part)
        
        # Ê∑ªÂä†HTMLÁâàÊú¨
        html_part = MIMEText(html_content, "html", "utf-8")
        message.attach(html_part)
        
        return message
    
    def _send_email_sync(
        self,
        to_emails: List[str],
        subject: str,
        html_content: str,
        text_content: Optional[str] = None
    ) -> bool:
        """ÂêåÊ≠•ÂèëÈÄÅÈÇÆ‰ª∂"""
        try:
            # Ê£ÄÊü•ÈÖçÁΩÆ
            if not self.notification_config.email_enabled:
                logger.warning("üìß ÈÇÆ‰ª∂ÈÄöÁü•Êú™ÂêØÁî®ÔºåË∑≥ËøáÂèëÈÄÅ")
                return False
            
            # ËØ¶ÁªÜÁöÑÈÖçÁΩÆÊ£ÄÊü•
            missing_configs = []
            if not self.notification_config.email_smtp_host:
                missing_configs.append("SMTP‰∏ªÊú∫")
            if not self.notification_config.email_username:
                missing_configs.append("Áî®Êà∑Âêç")
            if not self.notification_config.email_password:
                missing_configs.append("ÂØÜÁ†Å")
            if not self.notification_config.email_from:
                missing_configs.append("Âèë‰ª∂‰∫∫Âú∞ÂùÄ")
            
            if missing_configs:
                logger.error(f"üìß ÈÇÆ‰ª∂ÈÖçÁΩÆ‰∏çÂÆåÊï¥ÔºåÁº∫Â∞ë: {', '.join(missing_configs)}")
                return False
            
            logger.info(f"üìß ÂºÄÂßãÂèëÈÄÅÈÇÆ‰ª∂: {subject} -> {', '.join(to_emails)}")
            logger.info(f"üìß SMTPÈÖçÁΩÆ: {self.notification_config.email_smtp_host}:{self.notification_config.email_smtp_port}")
            
            # ÂàõÂª∫ÈÇÆ‰ª∂Ê∂àÊÅØ
            message = self._create_message(to_emails, subject, html_content, text_content)
            
            # ÂèëÈÄÅÈÇÆ‰ª∂
            with self._create_smtp_connection() as server:
                server.send_message(message)
            
            logger.info(f"‚úÖ ÈÇÆ‰ª∂ÂèëÈÄÅÊàêÂäü: {subject} -> {', '.join(to_emails)}")
            return True
            
        except smtplib.SMTPAuthenticationError as e:
            logger.error(f"üìß SMTPËÆ§ËØÅÂ§±Ë¥•: {str(e)} - ËØ∑Ê£ÄÊü•Áî®Êà∑ÂêçÂíåÂØÜÁ†Å")
            return False
        except smtplib.SMTPConnectError as e:
            logger.error(f"üìß SMTPËøûÊé•Â§±Ë¥•: {str(e)} - ËØ∑Ê£ÄÊü•‰∏ªÊú∫ÂíåÁ´ØÂè£")
            return False
        except smtplib.SMTPException as e:
            logger.error(f"üìß SMTPÈîôËØØ: {str(e)}")
            return False
        except Exception as e:
            logger.error(f"üìß ÈÇÆ‰ª∂ÂèëÈÄÅÂ§±Ë¥•: {str(e)}")
            return False
    
    async def send_email(
        self,
        to_emails: List[str],
        subject: str,
        html_content: str,
        text_content: Optional[str] = None
    ) -> bool:
        """ÂºÇÊ≠•ÂèëÈÄÅÈÇÆ‰ª∂"""
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(
            self.executor,
            self._send_email_sync,
            to_emails,
            subject,
            html_content,
            text_content
        )
    
    def _generate_report_html(self, report_data: Dict[str, Any]) -> str:
        """ÁîüÊàêÊä•ÂëäHTMLÂÜÖÂÆπ"""
        html_template = """
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>GitHub Sentinel Êä•Âëä</title>
            <style>
                body {{
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    line-height: 1.6;
                    color: #333;
                    max-width: 800px;
                    margin: 0 auto;
                    padding: 20px;
                    background: #f8f9fa;
                }}
                .header {{
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 30px;
                    border-radius: 10px;
                    text-align: center;
                    margin-bottom: 30px;
                    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                }}
                .section {{
                    background: white;
                    padding: 25px;
                    border-radius: 8px;
                    margin-bottom: 20px;
                    border-left: 4px solid #007bff;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                }}
                .ai-section {{
                    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
                    color: white;
                    padding: 25px;
                    border-radius: 8px;
                    margin-bottom: 20px;
                    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                }}
                .stats {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                    gap: 15px;
                    margin: 20px 0;
                }}
                .stat-card {{
                    background: #f8f9fa;
                    padding: 20px;
                    border-radius: 8px;
                    text-align: center;
                    border: 1px solid #e9ecef;
                    transition: transform 0.2s;
                }}
                .stat-card:hover {{
                    transform: translateY(-2px);
                    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
                }}
                .stat-number {{
                    font-size: 28px;
                    font-weight: bold;
                    color: #007bff;
                    margin-bottom: 5px;
                }}
                .stat-label {{
                    font-size: 14px;
                    color: #666;
                    font-weight: 500;
                }}
                .activity-item {{
                    background: #f8f9fa;
                    padding: 15px;
                    border-radius: 6px;
                    margin-bottom: 10px;
                    border-left: 3px solid #28a745;
                    transition: background 0.2s;
                }}
                .activity-item:hover {{
                    background: #e9ecef;
                }}
                .activity-title {{
                    font-weight: 600;
                    margin-bottom: 5px;
                    color: #495057;
                }}
                .activity-meta {{
                    font-size: 14px;
                    color: #6c757d;
                }}
                .footer {{
                    text-align: center;
                    color: #666;
                    font-size: 14px;
                    margin-top: 30px;
                    padding-top: 20px;
                    border-top: 1px solid #e9ecef;
                }}
                .ai-badge {{
                    display: inline-block;
                    background: rgba(255,255,255,0.2);
                    padding: 4px 8px;
                    border-radius: 12px;
                    font-size: 12px;
                    margin-left: 8px;
                }}
                h2 {{
                    color: #495057;
                    border-bottom: 2px solid #e9ecef;
                    padding-bottom: 10px;
                }}
                .repo-title {{
                    font-size: 20px;
                    font-weight: bold;
                    color: #495057;
                    margin-bottom: 15px;
                }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üìä GitHub Sentinel Êä•Âëä</h1>
                <p>üìÖ {report_type} - {date}</p>
                <p>üïí ÁîüÊàêÊó∂Èó¥: {generated_at}</p>
            </div>
            
            <div class="section">
                <h2>üìä ÁªüËÆ°Ê¶ÇËßà</h2>
                <div class="stats">
                    <div class="stat-card">
                        <div class="stat-number">{total_repositories}</div>
                        <div class="stat-label">üè† ÁõëÊéß‰ªìÂ∫ì</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{total_activities}</div>
                        <div class="stat-label">üìà ÊÄªÊ¥ªÂä®Êï∞</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{total_commits}</div>
                        <div class="stat-label">üíª Êèê‰∫§Êï∞</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{total_issues}</div>
                        <div class="stat-label">üêõ Issues</div>
                    </div>
                </div>
            </div>
            
            {repositories_content}
            
            <div class="footer">
                <p>Ê≠§Êä•ÂëäÁî± GitHub Sentinel Ëá™Âä®ÁîüÊàê</p>
                <p>Â¶ÇÊúâÈóÆÈ¢òÔºåËØ∑ËÅîÁ≥ªÁ≥ªÁªüÁÆ°ÁêÜÂëò</p>
            </div>
        </body>
        </html>
        """
        
        # Â§ÑÁêÜ‰ªìÂ∫ìÂÜÖÂÆπ
        repositories_content = ""
        for repo in report_data.get('repositories', []):
            repo_html = f"""
            <div class="section">
                <div class="repo-title">üìÅ {repo['name']}</div>
                <p><strong>Ê¥ªÂä®ÊëòË¶Å:</strong> {repo.get('summary', 'ÊöÇÊó†ÊëòË¶Å')}</p>
            """
            
            # Ê∑ªÂä†Ê¥ªÂä®ÂàóË°®
            if repo.get('activities'):
                repo_html += "<h3>üìã ÊúÄËøëÊ¥ªÂä®</h3>"
                for activity in repo.get('activities', []):
                    activity_type_emoji = {
                        'commit': 'üíª',
                        'issue': 'üêõ', 
                        'pull_request': 'üîÄ',
                        'release': 'üöÄ'
                    }.get(activity.get('type', '').lower(), 'üìù')
                    
                    repo_html += f"""
                    <div class="activity-item">
                        <div class="activity-title">{activity_type_emoji} {activity.get('title', 'Êó†Ê†áÈ¢ò')}</div>
                        <div class="activity-meta">
                            üë§ {activity.get('author', 'Êú™Áü•')} ‚Ä¢ üïí {activity.get('created_at', 'Êú™Áü•Êó∂Èó¥')}
                        </div>
                        {f'<p style="margin-top: 8px; color: #666;">{activity.get("description", "")}</p>' if activity.get('description') else ''}
                    </div>
                    """
            
            repo_html += "</div>"
            repositories_content += repo_html
        
        # ËÆ°ÁÆóÁªüËÆ°Êï∞ÊçÆ
        total_issues = sum(len([a for a in repo.get('activities', []) if a.get('type') == 'issue']) for repo in report_data.get('repositories', []))
        
        # Â°´ÂÖÖÊ®°Êùø
        return html_template.format(
            report_type=report_data.get('type', 'Êú™Áü•Á±ªÂûã'),
            date=report_data.get('date', datetime.now().strftime('%Y-%m-%d')),
            total_repositories=len(report_data.get('repositories', [])),
            total_activities=sum(len(repo.get('activities', [])) for repo in report_data.get('repositories', [])),
            total_commits=sum(len([a for a in repo.get('activities', []) if a.get('type') == 'commit']) for repo in report_data.get('repositories', [])),
            total_issues=total_issues,
            repositories_content=repositories_content,
            generated_at=datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        )
    
    def _generate_report_text(self, report_data: Dict[str, Any]) -> str:
        """ÁîüÊàêÊä•ÂëäÁ∫ØÊñáÊú¨ÂÜÖÂÆπ"""
        text_content = f"""
GitHub Sentinel Êä•Âëä
{report_data.get('type', 'Êú™Áü•Á±ªÂûã')} - {report_data.get('date', datetime.now().strftime('%Y-%m-%d'))}

ÁªüËÆ°‰ø°ÊÅØ:
- ÁõëÊéß‰ªìÂ∫ì: {len(report_data.get('repositories', []))}
- ÊÄªÊ¥ªÂä®Êï∞: {sum(len(repo.get('activities', [])) for repo in report_data.get('repositories', []))}

‰ªìÂ∫ìËØ¶ÊÉÖ:
"""
        
        for repo in report_data.get('repositories', []):
            text_content += f"\nüìÅ {repo['name']}\n"
            text_content += f"ÊëòË¶Å: {repo.get('summary', 'ÊöÇÊó†ÊëòË¶Å')}\n"
            
            for activity in repo.get('activities', []):
                text_content += f"  ‚Ä¢ [{activity.get('type', 'OTHER')}] {activity.get('title', 'Êó†Ê†áÈ¢ò')}\n"
                text_content += f"    ‰ΩúËÄÖ: {activity.get('author', 'Êú™Áü•')} | Êó∂Èó¥: {activity.get('created_at', 'Êú™Áü•Êó∂Èó¥')}\n"
        
        text_content += f"\n\nÊ≠§Êä•ÂëäÁî± GitHub Sentinel Ëá™Âä®ÁîüÊàê\nÁîüÊàêÊó∂Èó¥: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        return text_content
    
    async def send_report_notification(
        self,
        report_data: Dict[str, Any],
        to_emails: Optional[List[str]] = None
    ) -> bool:
        """ÂèëÈÄÅÊä•ÂëäÈÄöÁü•ÈÇÆ‰ª∂"""
        try:
            # ‰ΩøÁî®ÈªòËÆ§Êî∂‰ª∂‰∫∫ÂàóË°®
            if not to_emails:
                to_emails = self.notification_config.email_to
            
            if not to_emails:
                logger.warning("Ê≤°ÊúâÈÖçÁΩÆÈÇÆ‰ª∂Êî∂‰ª∂‰∫∫")
                return False
            
            # ÁîüÊàêÈÇÆ‰ª∂ÂÜÖÂÆπ
            subject = f"GitHub Sentinel {report_data.get('type', 'Êä•Âëä')} - {report_data.get('date', datetime.now().strftime('%Y-%m-%d'))}"
            html_content = self._generate_report_html(report_data)
            text_content = self._generate_report_text(report_data)
            
            # ÂèëÈÄÅÈÇÆ‰ª∂
            return await self.send_email(to_emails, subject, html_content, text_content)
            
        except Exception as e:
            logger.error(f"ÂèëÈÄÅÊä•ÂëäÈÄöÁü•Â§±Ë¥•: {str(e)}")
            return False
    
    async def send_subscription_notification(
        self,
        subscription_data: Dict[str, Any],
        to_emails: Optional[List[str]] = None
    ) -> bool:
        """ÂèëÈÄÅËÆ¢ÈòÖÈÄöÁü•ÈÇÆ‰ª∂"""
        try:
            if not to_emails:
                to_emails = self.notification_config.email_to
            
            if not to_emails:
                logger.warning("Ê≤°ÊúâÈÖçÁΩÆÈÇÆ‰ª∂Êî∂‰ª∂‰∫∫")
                return False
            
            subject = f"GitHub Sentinel ËÆ¢ÈòÖÈÄöÁü• - {subscription_data.get('repository', 'Êú™Áü•‰ªìÂ∫ì')}"
            
            html_content = f"""
            <h2>üì¢ ËÆ¢ÈòÖÈÄöÁü•</h2>
            <p>ÊÇ®ËÆ¢ÈòÖÁöÑ‰ªìÂ∫ì <strong>{subscription_data.get('repository', 'Êú™Áü•‰ªìÂ∫ì')}</strong> ÊúâÊñ∞ÁöÑÊ¥ªÂä®:</p>
            <ul>
                <li>Ê¥ªÂä®Á±ªÂûã: {subscription_data.get('activity_type', 'Êú™Áü•')}</li>
                <li>Ê¥ªÂä®Ê†áÈ¢ò: {subscription_data.get('activity_title', 'Êó†Ê†áÈ¢ò')}</li>
                <li>Ê¥ªÂä®Êó∂Èó¥: {subscription_data.get('activity_time', 'Êú™Áü•Êó∂Èó¥')}</li>
            </ul>
            <p>ËØ¶ÊÉÖËØ∑Êü•Áúã: <a href="{subscription_data.get('activity_url', '#')}">ÁÇπÂáªÊü•Áúã</a></p>
            """
            
            return await self.send_email(to_emails, subject, html_content)
            
        except Exception as e:
            logger.error(f"ÂèëÈÄÅËÆ¢ÈòÖÈÄöÁü•Â§±Ë¥•: {str(e)}")
            return False
    
    async def test_connection(self) -> bool:
        """ÊµãËØïÈÇÆ‰ª∂ËøûÊé•"""
        try:
            with self._create_smtp_connection() as server:
                logger.info("ÈÇÆ‰ª∂ËøûÊé•ÊµãËØïÊàêÂäü")
                return True
        except Exception as e:
            logger.error(f"ÈÇÆ‰ª∂ËøûÊé•ÊµãËØïÂ§±Ë¥•: {str(e)}")
            return False 