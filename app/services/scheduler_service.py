"""
ÂÆöÊó∂‰ªªÂä°ÊúçÂä°
Ë¥üË¥£ÂÆöÊúüÊî∂ÈõÜGitHubÊï∞ÊçÆÂπ∂Êõ¥Êñ∞Êï∞ÊçÆÂ∫ì
"""

import asyncio
from datetime import datetime, timedelta
from typing import Dict, Any, List

from app.core.logger import get_logger
from app.core.database import get_db_session
from app.models.subscription import Subscription, RepositoryActivity
from app.services.subscription_service import SubscriptionService
from app.collectors.github_collector import GitHubCollector
from app.utils.timezone_utils import beijing_now
from sqlalchemy import select

logger = get_logger(__name__)


class SchedulerService:
    """ÂÆöÊó∂‰ªªÂä°ÊúçÂä°"""
    
    def __init__(self):
        self.github_collector = GitHubCollector()
        self.is_running = False
    
    async def start_scheduler(self):
        """ÂêØÂä®ÂÆöÊó∂‰ªªÂä°Ë∞ÉÂ∫¶Âô®"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è ÂÆöÊó∂‰ªªÂä°Ë∞ÉÂ∫¶Âô®Â∑≤Âú®ËøêË°å")
            return
        
        self.is_running = True
        logger.info("üöÄ ÂêØÂä®ÂÆöÊó∂‰ªªÂä°Ë∞ÉÂ∫¶Âô®")
        
        # ÂêØÂä®Êï∞ÊçÆÊî∂ÈõÜ‰ªªÂä°
        asyncio.create_task(self._data_collection_loop())
        
    async def stop_scheduler(self):
        """ÂÅúÊ≠¢ÂÆöÊó∂‰ªªÂä°Ë∞ÉÂ∫¶Âô®"""
        self.is_running = False
        logger.info("üõë ÂÅúÊ≠¢ÂÆöÊó∂‰ªªÂä°Ë∞ÉÂ∫¶Âô®")
    
    async def _data_collection_loop(self):
        """Êï∞ÊçÆÊî∂ÈõÜÂæ™ÁéØ - ÊØèÂàÜÈíüÊâßË°å‰∏ÄÊ¨°"""
        while self.is_running:
            try:
                await self.collect_repository_data()
                # Á≠âÂæÖ60Áßí
                await asyncio.sleep(60)
            except Exception as e:
                logger.error(f"üí• Êï∞ÊçÆÊî∂ÈõÜÂæ™ÁéØÂá∫Èîô: {e}", exc_info=True)
                # Âá∫ÈîôÂêéÁ≠âÂæÖ30ÁßíÂÜçÈáçËØï
                await asyncio.sleep(30)
    
    async def collect_repository_data(self):
        """Êî∂ÈõÜ‰ªìÂ∫ìÊï∞ÊçÆ"""
        try:
            logger.info("üìä ÂºÄÂßãÂÆöÊó∂Êî∂ÈõÜ‰ªìÂ∫ìÊï∞ÊçÆ")
            
            # Ëé∑ÂèñÊâÄÊúâÊ¥ªË∑ÉËÆ¢ÈòÖ
            async with get_db_session() as session:
                result = await session.execute(
                    select(Subscription).where(Subscription.status == "active")
                )
                subscriptions = result.scalars().all()
            
            if not subscriptions:
                logger.info("üì≠ Ê≤°ÊúâÊ¥ªË∑ÉÁöÑËÆ¢ÈòÖÔºåË∑≥ËøáÊï∞ÊçÆÊî∂ÈõÜ")
                return
            
            logger.info(f"üìã ÊâæÂà∞ {len(subscriptions)} ‰∏™Ê¥ªË∑ÉËÆ¢ÈòÖ")
            
            success_count = 0
            error_count = 0
            
            for subscription in subscriptions:
                try:
                    await self._collect_subscription_data(subscription)
                    success_count += 1
                except Exception as e:
                    logger.error(f"üí• Êî∂ÈõÜËÆ¢ÈòÖ {subscription.id} Êï∞ÊçÆÂ§±Ë¥•: {e}", exc_info=True)
                    error_count += 1
            
            logger.info(f"‚úÖ Êï∞ÊçÆÊî∂ÈõÜÂÆåÊàê - ÊàêÂäü: {success_count}, Â§±Ë¥•: {error_count}")
            
        except Exception as e:
            logger.error(f"üí• Êî∂ÈõÜ‰ªìÂ∫ìÊï∞ÊçÆÂ§±Ë¥•: {e}", exc_info=True)
    
    async def _collect_subscription_data(self, subscription: Subscription):
        """Êî∂ÈõÜÂçï‰∏™ËÆ¢ÈòÖÁöÑÊï∞ÊçÆ"""
        try:
            logger.info(f"üìä Êî∂ÈõÜËÆ¢ÈòÖÊï∞ÊçÆ: {subscription.repository}")
            
            # Ëß£Êûê‰ªìÂ∫ì‰ø°ÊÅØ
            repo_parts = subscription.repository.split('/')
            if len(repo_parts) != 2:
                logger.error(f"‚ùå ‰ªìÂ∫ìÊ†ºÂºèÈîôËØØ: {subscription.repository}")
                return
            
            owner, repo = repo_parts
            
            # Êî∂ÈõÜÊúÄËøë1Â§©ÁöÑÊ¥ªÂä®Êï∞ÊçÆÔºàGitHubÊî∂ÈõÜÂô®‰ºöËá™Âä®Â≠òÂÇ®Âà∞Êï∞ÊçÆÂ∫ìÔºâ
            activities_data = await self.github_collector.collect_repository_activities(
                subscription, 
                days=1,  # Êî∂ÈõÜÊúÄËøë1Â§©ÁöÑÊï∞ÊçÆÔºå‰ΩÜ‰ºöËøáÊª§ÈáçÂ§ç
                include_states=['open', 'closed', 'merged']
            )
            
            # ËÆ∞ÂΩïÊî∂ÈõÜÁªìÊûú
            if activities_data.get('activities'):
                logger.info(f"‚úÖ Êî∂ÈõÜÂπ∂Â≠òÂÇ®‰∫Ü {len(activities_data['activities'])} Êù°Ê¥ªÂä®ËÆ∞ÂΩï")
            else:
                logger.info(f"üì≠ Ê≤°ÊúâÊñ∞ÁöÑÊ¥ªÂä®Êï∞ÊçÆ")
            
        except Exception as e:
            logger.error(f"üí• Êî∂ÈõÜËÆ¢ÈòÖ {subscription.id} Êï∞ÊçÆÂ§±Ë¥•: {e}", exc_info=True)
            raise
    
    async def _store_activities(self, activities: List[Dict[str, Any]]):
        """Â≠òÂÇ®Ê¥ªÂä®Êï∞ÊçÆÂà∞Êï∞ÊçÆÂ∫ì"""
        try:
            async with get_db_session() as session:
                stored_count = 0
                
                for activity_data in activities:
                    # Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®Áõ∏ÂêåÁöÑÊ¥ªÂä®
                    existing = await session.execute(
                        select(RepositoryActivity).where(
                            RepositoryActivity.subscription_id == activity_data['subscription_id'],
                            RepositoryActivity.activity_id == activity_data['activity_id'],
                            RepositoryActivity.activity_type == activity_data['activity_type']
                        )
                    )
                    
                    if existing.scalar():
                        continue  # Ë∑≥ËøáÂ∑≤Â≠òÂú®ÁöÑÊ¥ªÂä®
                    
                    # ÂàõÂª∫Êñ∞ÁöÑÊ¥ªÂä®ËÆ∞ÂΩï
                    activity = RepositoryActivity(
                        subscription_id=activity_data['subscription_id'],
                        repository_full_name=activity_data['repository_full_name'],
                        activity_type=activity_data['activity_type'],
                        activity_id=activity_data['activity_id'],
                        title=activity_data.get('title'),
                        description=activity_data.get('description'),
                        url=activity_data.get('url'),
                        author_login=activity_data.get('author_login'),
                        author_name=activity_data.get('author_name'),
                        state=activity_data.get('state'),
                        github_created_at=activity_data.get('github_created_at'),
                        created_at=beijing_now()
                    )
                    
                    session.add(activity)
                    stored_count += 1
                
                await session.commit()
                
                if stored_count > 0:
                    logger.info(f"üíæ Â≠òÂÇ®‰∫Ü {stored_count} Êù°Êñ∞Ê¥ªÂä®ËÆ∞ÂΩï")
                
        except Exception as e:
            logger.error(f"üí• Â≠òÂÇ®Ê¥ªÂä®Êï∞ÊçÆÂ§±Ë¥•: {e}", exc_info=True)
            raise
    
    async def _update_subscription_sync_time(self, subscription_id: int):
        """Êõ¥Êñ∞ËÆ¢ÈòÖÁöÑÊúÄÂêéÂêåÊ≠•Êó∂Èó¥"""
        try:
            async with get_db_session() as session:
                result = await session.execute(
                    select(Subscription).where(Subscription.id == subscription_id)
                )
                subscription = result.scalar()
                
                if subscription:
                    subscription.last_sync_at = beijing_now()
                    await session.commit()
                    
        except Exception as e:
            logger.error(f"üí• Êõ¥Êñ∞ËÆ¢ÈòÖÂêåÊ≠•Êó∂Èó¥Â§±Ë¥•: {e}", exc_info=True)
    
    async def get_dashboard_statistics(self) -> Dict[str, Any]:
        """Ëé∑Âèñ Dashboard ÁªüËÆ°Êï∞ÊçÆ"""
        try:
            async with get_db_session() as session:
                # Ëé∑ÂèñÊúÄËøë24Â∞èÊó∂ÁöÑÊ¥ªÂä®ÁªüËÆ°
                cutoff_time = beijing_now() - timedelta(hours=24)
                
                # ÊåâÊ¥ªÂä®Á±ªÂûãÁªüËÆ°
                activity_stats = {}
                for activity_type in ['commit', 'issue', 'pull_request', 'release']:
                    result = await session.execute(
                        select(RepositoryActivity).where(
                            RepositoryActivity.activity_type == activity_type,
                            RepositoryActivity.created_at >= cutoff_time
                        )
                    )
                    count = len(result.scalars().all())
                    activity_stats[activity_type] = count
                
                # Ëé∑ÂèñÊúÄÊ¥ªË∑ÉÁöÑ‰ªìÂ∫ì
                from sqlalchemy import func
                result = await session.execute(
                    select(
                        RepositoryActivity.repository_full_name,
                        func.count(RepositoryActivity.id).label('activity_count')
                    ).where(
                        RepositoryActivity.created_at >= cutoff_time
                    ).group_by(
                        RepositoryActivity.repository_full_name
                    ).order_by(
                        func.count(RepositoryActivity.id).desc()
                    ).limit(10)
                )
                
                top_repositories = []
                for row in result:
                    top_repositories.append({
                        'name': row.repository_full_name,
                        'activity_count': row.activity_count
                    })
                
                return {
                    'activity_stats': activity_stats,
                    'top_repositories': top_repositories,
                    'last_updated': beijing_now().isoformat()
                }
                
        except Exception as e:
            logger.error(f"üí• Ëé∑Âèñ Dashboard ÁªüËÆ°Êï∞ÊçÆÂ§±Ë¥•: {e}")
            return {
                'activity_stats': {},
                'top_repositories': [],
                'last_updated': beijing_now().isoformat()
            }


# ÂÖ®Â±ÄË∞ÉÂ∫¶Âô®ÂÆû‰æã
scheduler_service = SchedulerService() 